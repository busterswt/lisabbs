{ Helper routines for text-based UI, with simultaneous I/O to port and console }
{ "Owns" the screen and serial port }
{ Assumes remote user has a VT-100 compatible display }
{ 80 cols, 24 rows used for UI; further rows on Lisa used for status info }
{ 24: blank }
{ 25: blank }
{ 26: blank }
{ 26: File transfer progress info }
{ 27: blank }
{ 28: Serial TX/RX errors }
{ 29: blank }
{ 30: BBS status line }
{ 31: blank }
UNIT XferUi;

INTERFACE

USES
    {$U SysCall.Obj}        SysCall,
    {$U PasLibCall.Obj}     PasLibCall,
    {$U Xfer/LibAsm.Obj}    XferAsm,
    {$U Xfer/LibPort.Obj}   XferPort;

CONST
    kRowXferProgress = 26;
    kRowIoErrors     = 28;
    kRowStatus       = 30;

TYPE
    { A string type for text to show on port and console displays }
    DisplayLine = String[80];

    { For specifying coordinates on both the port and console displays }
    ScreenCol = 0..79;
    ScreenRow = 0..23;

    { For specifying limits on user input line size }
    InputLength = 0..255;

    { Strings of various lengths }
    Str50  = String[50];
    Str20  = String[20];
    Str10  = String[10]

VAR
    { Serial port handles }
    ui_p:        Port;
    ui_fd:       Integer;

    { Input file for echo-less keyboard input }
    kinput:      Text;

    { Output file for error messages to alternate console }
    stderr:      Text;

    { A buffer for assembling text and escape codes for a line of port output }
    port_buf:    String[120];

{ PROCEDURES AND FUNCTIONS }

    { Initialize the UI system with information about an open serial port }
    PROCEDURE UiInit(p: Port; fd: Integer);

    { Retrieve the Port for the open serial port }
    FUNCTION UiGetPort: Port;

    { Retrieve the refnum for the open serial port }
    FUNCTION UiGetFd: Integer;

    { Clear the screen }
    PROCEDURE UiClearScreen;

    { Display a line of text on the specified row }
    PROCEDURE UiPutLine(row: ScreenRow; line_text: DisplayLine);

    { Poll for one character of user input without echo; 0 if no char waiting }
    FUNCTION UiPollChar: Char;

    { Loop on UiPollChar until any non-0x0 char is read }
    FUNCTION UiGetChar: Char;

    { Display a single character at current cursor position }
    PROCEDURE UiPutChar(ch: Char);

    { Retrieve a line of text from the user }
    PROCEDURE UiGetLine(VAR typed: Str255; count: InputLength);

    { Display text on the status line (Lisa display only) }
    PROCEDURE UiPutStatus(line_text: DisplayLine);

    { Display error information on the error line (Lisa display only) }
    { No error number shown if errno is 0; no message shown if message is '' }
    PROCEDURE UiPutError(errno: Integer; message: DisplayLine);

    { Display progress information on the progress line (Lisa display only) }
    { Progress ranges in [0, 999], negative progress clears progress line }
    { 50 characters are available beyond the end of the progress bar for
      text in info }
    PROCEDURE UiPutProgress(progress: Integer; info: Str50);

    { Helpers for constructing DisplayLine values (where else to put them?) }
    { Compute a string representation of an unsigned 32-bit integer }
    PROCEDURE UintToStr(value: Longint; VAR uint_str: Str10);

IMPLEMENTATION

    { Initialize the UI system with information about an open serial port }
    PROCEDURE UiInit{p: Port; fd: Integer};
    BEGIN
        ui_p := p;
        ui_fd := fd;
        Reset(kinput, '-KEYBOARD');
        Reset(stderr, '-ALTCONSOLE');
    END;

    { Helper: write the current contents of port_buf to the serial port }
    PROCEDURE SendPortBuf;
    VAR
        actual:  Longint;
        errno:   Integer;
    BEGIN
        TimedWrite(ui_p, ui_fd, Ord4(@port_buf) + 1, Length(port_buf),
                   actual, 10, errno);  { Ten second timeout }
             IF errno <> 0 THEN UiPutError(errno, '')
        ELSE IF actual <> Length(port_buf) THEN BEGIN
            { Note abuse of UiPutError with subsequent Write call }
            UiPutError(0, 'wrote ');
            Write(output, actual, ' bytes instead of ', Length(port_buf), '.');
        END;
    END;

    PROCEDURE UintToStr{value: Longint; VAR uint_str: Str10};
    VAR
        startaddr:  Longint;
        endaddr:    Longint;
        len:        Integer;
    BEGIN
        uint_str   := '@@@@@@@@@@';  { Allocate room for ten digits }
        startaddr  := Ord4(@uint_str) + 1;
        endaddr    := WriteDec(startaddr, value);
        len        := endaddr - startaddr;
        IF len < 10 THEN Delete(uint_str, len + 1, 10 - len);  { Truncate }
    END;

    { Helper: add a <ESC>[ escape code to the end of the port_buf buffer }
    PROCEDURE AppendEscapeCode(code: Str20);
    VAR
        old_len:  Integer;
    BEGIN
        old_len := Length(port_buf);
        StrApnd(120, Ord4(@port_buf), 'e[');
        StrApnd(120, Ord4(@port_buf), code);
        port_buf[old_len + 1] := Chr(27);  { Replace 'e' with ESC }
    END;

    { Helper: compute a VT100 cursor movement code }
    PROCEDURE Vt100GoToXY(col: ScreenCol; row: ScreenRow; VAR goto_code: Str10);
    VAR
        row_str: Str10;
        col_str: Str10;
    BEGIN
        UintToStr(Ord(row) + 1, row_str);
        UintToStr(Ord(col) + 1, col_str);
        goto_code := row_str;
        StrApnd(10, Ord4(@goto_code), ';');
        StrApnd(10, Ord4(@goto_code), col_str);
        StrApnd(10, Ord4(@goto_code), 'H');
    END;

    FUNCTION UiGetPort{: Port};
    BEGIN
        UiGetPort := ui_p;
    END;

    FUNCTION UiGetFd{: Integer};
    BEGIN
        UiGetFd := ui_fd;
    END;

    PROCEDURE UiClearScreen;
    BEGIN
        { First, the console display }
        ScreenCtr(CgoHome);
        ScreenCtr(CclearScreen);

        { Next, the serial port }
        port_buf := '';
        AppendEscapeCode('H');
        AppendEscapeCode('2J');
        SendPortBuf;
    END;

    PROCEDURE UiPutLine{row: ScreenRow, line_text: DisplayLine};
    VAR
        goto_code:  Str10;
    BEGIN
        { First, the console display }
        GoToXY(0, row);
        ScreenCtr(CclearELine);
        Write(output, line_text);

        { Next, the serial port }
        port_buf := '';
        Vt100GoToXY(0, row, goto_code);
        AppendEscapeCode(goto_code);  { Move to selected row }
        AppendEscapeCode('2K');       { Clear line }
        StrApnd(120, Ord4(@port_buf), line_text);
        SendPortBuf;
    END;

    FUNCTION UiPollChar{: Char};
    VAR
        ch:      Char;
        b:       Byte;
        actual:  Longint;
        errno:   Integer;
    BEGIN
        ch := Chr(0);  { Assume no character by default }

        { First, the console keyboard }
        IF Keypress THEN BEGIN
            Read(kinput, ch);
            UiPollChar := ch;
            Exit(UiPollChar);
        END;

        { Next, the serial port }
        PolledRead(ui_fd, Ord4(@b), 1, actual, 1, 31337, errno);  { Just once }
        IF errno <> 0 THEN BEGIN
            UiPutError(errno, '');
            Exit(UiPollChar);
        END;
        IF actual > 0 THEN BEGIN
            IF b >= 0 THEN ch := Chr(b) ELSE ch := Chr(256 + b);
            UiPollChar := ch;
            Exit(UiPollChar);
        END;
    END;

    FUNCTION UiGetChar{: Char};
    VAR
        ch:     Char;
        tspec:  Timestmp_Interval;
        tm:     Time_Rec;
        errno:  Integer;
    BEGIN
        tspec.sec  := 0;
        tspec.msec := 100;
        REPEAT
            ch := UiPollChar;
            Delay_Time(errno, tspec, tm);  { Errors will be silent }
        UNTIL ch <> Chr(0);
        UiGetChar := ch;
    END;

    PROCEDURE UiPutChar{ch: Char};
    BEGIN
        { First, the console display }
        Write(output, ch);

        { Next, the serial port }
        port_buf    := '@';
        port_buf[1] := ch;
        SendPortBuf;
    END;

    PROCEDURE UiGetLine{VAR typed: Str255; count: InputLength};
    VAR
        one_ch:  String[1];
    BEGIN
        typed  := '';
        one_ch := '@';

        WHILE true DO BEGIN
            one_ch[1] := UiGetChar;

            { Break on LF or CR }
            IF one_ch[1] IN [Chr(10), Chr(13)] THEN Exit(UiGetLine);

            { Drop last char on BS or DEL, otherwise keep char... }
            IF one_ch[1] IN [Chr(8), Chr(127)] THEN BEGIN
                IF Length(typed) > 0 THEN BEGIN
                    Delete(typed, Length(typed), 1);
                    port_buf := '@ @';
                    port_buf[1] := Chr(8);
                    port_buf[3] := Chr(8);
                    SendPortBuf;
                    count := count + 1;
                END;
            END ELSE IF count > 0 THEN BEGIN  { ...unless we're at max length }
                StrApnd(255, Ord4(@typed), one_ch);
                UiPutChar(one_ch[1]);  { echo back to user }
                count := count - 1;
            END;
        END;
    END;

    PROCEDURE UiPutStatus{line_text: DisplayLine};
    BEGIN
        GoToXY(0, kRowStatus);
        ScreenCtr(CclearELine);
        Write(output, line_text);
    END;

    PROCEDURE UiPutError{errno: Integer; message: DisplayLine};
    BEGIN
        GoToXY(0, kRowIoErrors);
        ScreenCtr(CclearELine);

        IF (errno = 0) AND (message = '') THEN Exit(UiPutError);  { Clear only }

        { Error output to the screen }
        IF errno = 0 THEN Write(output, 'Error')
                     ELSE Write(output, 'Error ', errno);
        IF message <> '' THEN Write(output, ': ', message);

        { Error output to the alternate console }
        IF errno = 0 THEN WriteLn(stderr, 'Error: ', message)
                     ELSE WriteLn(stderr, 'Error ', errno, ': ', message);
    END;

    PROCEDURE UiPutProgress{progress: Integer; info: Str50};
    LABEL
        1111;
    VAR
        dline:  DisplayLine;
        count:  Integer;
        i:      Integer;
    BEGIN
        GoToXY(0, kRowXferProgress);
        ScreenCtr(CclearELine);

        IF progress < 0 THEN Exit(UiPutProgress);  { Clear only }

        { Draw progress bar; note 27 'ticks' inside, and 27*37 = 999 }
        dline := '[                           ] ';
        count := 0;
        FOR i := 2 to 28 DO BEGIN
            count := count + 37;
            IF count <= progress THEN dline[i] := '#'
                                 ELSE GOTO 1111;
        END; 1111:

        StrApnd(80, Ord4(@dline), info);
        Write(output, dline);
    END;

END.
