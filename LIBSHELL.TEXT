{ The text-based user interface, with simultaneous I/O to port and console }
UNIT XferShell;

INTERFACE

USES
    {$U SysCall.Obj}        SysCall,
    {$U PasLibCall.Obj}     PasLibCall,
    {$U Xfer/LibAsm.Obj}    XferAsm,
    {$U Xfer/LibDir.Obj}    XferDir,
    {$U Xfer/LibPort.Obj}   XferPort,
    {$U Xfer/LibUi.Obj}     XferUi,
    {$U Xfer/LibXfer.Obj}   XferXfer;

TYPE
    { Indices for tagging directory listing entries }
    { Due to SET limitations, you can only tag the first 4000 entries }
    TagIndices = 1..4000;

    { Current state of the shell }
    { Includes only state we cannot obtain by querying the OS, so
      modifications to the filesystem while the shell is running will cause
      unexpected behavior }
    ShellState = RECORD
        { Directory listings shown to user in "pages" of <=20 entries each }
        d_page:  Integer;                 { Current page; first page is 0 }
        d_final: Boolean;                 { This is the last page for this dir }
        d_entry: ARRAY[1..20] OF E_Name;  { Files to show in this page }
        d_size:  Integer;                 { Number of entries in the page }

        { User can tag entries for batch operations }
        { Tag N means the Nth entry encountered in a directory listing }
        tagged:  SET OF TagIndices;
        n_tags:  Integer;  { Number of entries tagged }
    END;

{ PROCEDURES AND FUNCTIONS }

    { Main shell interface }
    { XferUi MUST be initialized before calling this procedure }
    PROCEDURE RunXferShell;

IMPLEMENTATION

    { Helper: calls UiPutError iff errno <> 0 }
    PROCEDURE CheckWarn(errno: Integer; message: DisplayLine);
    BEGIN
        IF errno <> 0 THEN UiPutError(errno, message);
    END;

    { Helper: rewind to the beginning of the directory stream }
    PROCEDURE RewindDirStream(VAR errno: Integer);
    { VAR
          cwd:  Pathname; }
    BEGIN
        { Get_Working_Dir(errno, cwd);
          CheckWarn(errno, 'getting current working dir');
          IF errno <> 0 THEN Exit(RewindDirStream);
          XdResetCatalog(errno, cwd);
          CheckWarn(errno, 'rewinding directory stream'); }
        { Delete following line and this comment, then uncomment above code
          to use filesystem functions for directory stream rewinding }
        XdRewindDirStream(errno);
    END;

    { Shows the current page of directory entries }
    { Does not clear the screen, only lines where entries are shown }
    PROCEDURE OpShowDirPage(VAR state: ShellState);
    VAR
        i:      Integer;
        dline:  DisplayLine;
    BEGIN
        { Show the entries on this page }
        FOR i := 1 TO state.d_size DO BEGIN
            dline := ' @)  ';
            dline[2] := Chr(64 + i);  { '@' + i; i = 1 gives us 'A' }
            StrApnd(80, Ord4(@dline), state.d_entry[i]);

            IF (20 * state.d_page + i) IN state.tagged THEN BEGIN
                dline[5] := '>';
                StrApnd(80, Ord4(@dline), '<');
            END;

            UiPutLine(1 + i, dline);
        END;

        { Clear any leftover screen lines }
        FOR i := state.d_size + 1 TO 20 DO UiPutLine(1 + i, '');
    END;

    { Advances to the next directory page }
    { Creates no output of its own }
    PROCEDURE OpPageNext(VAR state: ShellState);
    LABEL
        1111;
    VAR
        cwd:        Pathname;
        errno:      Integer;
        prefix:     E_Name;
        i:          Integer;
        errno_str:  Str10;
    BEGIN
        state.d_size := 0;
        IF state.d_final THEN BEGIN
            { Loop back to the top of the directory listing }
            state.d_final := false;
            state.d_page  := 0;
            RewindDirStream(errno);
        END ELSE BEGIN
            { Mark one page forward advance in the directory listing }
            state.d_page := state.d_page + 1;
        END;

        { Load the next page of directory entries }
        prefix := '';  { The wildcard is always '*' }
        FOR i := 1 TO 20 DO BEGIN
            state.d_entry[i] := '';
            XdGetNextEntry(errno, prefix, state.d_entry[i]);
            IF errno = 848 THEN BEGIN  { Out of directory entries }
                state.d_final := true;  { Mark that this is the last page }
                GOTO 1111;
            END ELSE BEGIN
                IF errno <> 0 THEN BEGIN
                    UiPutError(errno, 'reading directory stream');
                    UintToStr(errno, errno_str);
                    state.d_entry[i] := Concat(  { Won't exceed 32 chars }
                        '- Error ', errno_str, ' reading dir -');
                END;
                state.d_size := state.d_size + 1;
            END;
        END; 1111:  { statement needed here? }
    END;

    { Goes to the page'th page of the directory listing }
    { This approach attempts to handle concurrent filesystem modification
      somewhat gracefully }
    { Creates no output of its own }
    PROCEDURE OpPageGoto(VAR state: ShellState; page: Integer);
    BEGIN
        WHILE state.d_page <> page DO BEGIN
            OpPageNext(state);
            IF state.d_final THEN BEGIN
                IF state.d_page < page THEN BEGIN
                    { Strange: we've lapped around the entire directory listing
                      without returning to the prev_page; someone may have
                      deleted a whole bunch of files here, so we shrug and
                      loop around to the first page }
                    OpPageNext(state);
                    UiPutError(0, 'current directory modified unexpectedly?');
                    Exit(OpPageGoto);
                END;
            END;
        END;
    END;

    { Goes back to the previous directory page (by advancing past wraparound }
    { Creates no output of its own }
    PROCEDURE OpPagePrev(VAR state: ShellState);
    VAR
        saw_final:  Boolean;
    BEGIN
        UiPutStatus('Looping around to previous directory page...');

        { Nothing to do if the directory has just one page }
        IF (state.d_page = 0) AND state.d_final THEN Exit(OpPagePrev);

        { The page preceding the first page is the last page }
        IF state.d_page = 0 THEN BEGIN
            WHILE NOT state.d_final DO OpPageNext(state);
            { And if this page has no entries, then we just gotta go around
              again to the previous page... }
            IF state.d_size = 0 THEN OpPagePrev(state);
            Exit(OpPagePrev);
        END;

        { Non-special case: advance through the wraparound }
        OpPageGoto(state, state.d_page - 1);
    END;

    { Shows what devices are currently online }
    PROCEDURE OpOnline(VAR state: ShellState);
    VAR
        dline:  DisplayLine;

        { Prepares info string about a device or empty string if error }
        PROCEDURE DevInfoStr(path: Pathname; VAR dline: DisplayLine);
        VAR
            my_path:  Pathname;
            stat:     Fs_Info;
            errno:    Integer;
        BEGIN
            dline := '';
            my_path := path;
            Lookup(errno, my_path, stat);
            IF errno <> 0 THEN Exit(DevInfoStr);

            dline := '  ';
            StrApnd(80, Ord4(@dline), path);
            StrApnd(80, Ord4(@dline), ', ');
            StrApnd(80, Ord4(@dline), stat.dir_path);
            StrApnd(80, Ord4(@dline), ', ');
            IF stat.mounted THEN         StrApnd(80, Ord4(@dline), 'mounted, ');
            IF stat.blockstructured THEN StrApnd(80, Ord4(@dline), 'block, ');
            CASE stat.devt OF
                diskdev:    StrApnd(80, Ord4(@dline), 'diskdev');
                pascalbd:   StrApnd(80, Ord4(@dline), 'pascalbd');
                seqdev:     StrApnd(80, Ord4(@dline), 'seqdev');
                bitbkt:     StrApnd(80, Ord4(@dline), 'bitbkt');
                non_io:     StrApnd(80, Ord4(@dline), 'non_io');
            END;
        END;
    BEGIN
        UiPutStatus('Producing devices report');

        { The most OS version compatible way to discover online devices is to
          just go through the list of possible devices }
        UiClearScreen;
        UiPutLine(0, 'Online devices report, page 1 of 2');
        DevInfoStr('-BITBKT', dline);
        UiPutLine(2, dline);
        DevInfoStr('-UPPER', dline);
        UiPutLine(3, dline);
        DevInfoStr('-LOWER', dline);
        UiPutLine(4, dline);
        DevInfoStr('-UPPERTWIG', dline);
        UiPutLine(5, dline);
        DevInfoStr('-LOWERTWIG', dline);
        UiPutLine(6, dline);
        DevInfoStr('-PARAPORT', dline);
        UiPutLine(7, dline);
        DevInfoStr('-RS232A', dline);
        UiPutLine(8, dline);
        DevInfoStr('-RS232B', dline);
        UiPutLine(9, dline);
        DevInfoStr('-MAINCONSOLE', dline);
        UiPutLine(10, dline);
        DevInfoStr('-ALTCONSOLE', dline);
        UiPutLine(11, dline);
        DevInfoStr('-CONSOLE', dline);
        UiPutLine(12, dline);
        DevInfoStr('-KEYBOARD', dline);
        UiPutLine(13, dline);
        DevInfoStr('-PRINTER', dline);
        UiPutLine(14, dline);

        UiPutLine(23, 'Press SPACE to continue');
        WHILE UiGetChar <> ' ' DO BEGIN END;

        UiClearScreen;
        UiPutLine(0, 'Online devices report, page 2 of 2');

        DevInfoStr('-SLOT1', dline);
        UiPutLine(2, dline);
        DevInfoStr('-SLOT1CHAN1', dline);
        UiPutLine(3, dline);
        DevInfoStr('-SLOT1CHAN2', dline);
        UiPutLine(4, dline);
        DevInfoStr('-SLOT1CHAN3', dline);
        UiPutLine(5, dline);
        DevInfoStr('-SLOT2', dline);
        UiPutLine(6, dline);
        DevInfoStr('-SLOT2CHAN1', dline);
        UiPutLine(7, dline);
        DevInfoStr('-SLOT2CHAN2', dline);
        UiPutLine(8, dline);
        DevInfoStr('-SLOT2CHAN3', dline);
        UiPutLine(9, dline);
        DevInfoStr('-SLOT3', dline);
        UiPutLine(10, dline);
        DevInfoStr('-SLOT3CHAN1', dline);
        UiPutLine(11, dline);
        DevInfoStr('-SLOT3CHAN2', dline);
        UiPutLine(12, dline);
        DevInfoStr('-SLOT3CHAN3', dline);
        UiPutLine(13, dline);

        UiPutLine(23, 'Press SPACE to continue');
        WHILE UiGetChar <> ' ' DO BEGIN END;
    END;

    { Change the current working directory }
    PROCEDURE OpChdir(VAR state: ShellState);
    VAR
        typed:  Str255;
        path:   Pathname;
        dline:  DisplayLine;
        errno:  Integer;
    BEGIN
        UiPutStatus( 'Changing current directory');
        UiPutLine(0, 'Changing current directory');

        UiPutLine(23, 'New dir: ');
        UiGetLine(typed, max_pathname);
        path := typed;
        Set_Working_Dir(errno, path);

        IF errno = 0 THEN BEGIN
            state.d_final := true;    { Will restart us at top of directory }
            state.tagged := [];       { No entries are tagged }
            state.n_tags := 0;
        END ELSE BEGIN
            IF Length(path) <= 18 THEN BEGIN
                dline := 'Failed to set current directory to "';
                StrApnd(80, Ord4(@dline), path);
                StrApnd(80, Ord4(@dline), '"; press SPACE to continue');
            END ELSE BEGIN
                dline :=
                    'Failed to set current directory; press SPACE to continue';
            END;
            UiPutLine(23, dline);
            WHILE UiGetChar <> ' ' DO BEGIN END;
        END;
    END;

    { Tag or untag files }
    PROCEDURE OpTagToggle(VAR state: ShellState);
    VAR
        ch:     Char;
        index:  Integer;
        dline:  DisplayLine;
    BEGIN
        UiPutStatus( 'Toggling file tags');
        UiPutLine(0, 'Tag/untag files:');

        IF state.d_size <= 0 THEN BEGIN
            UiPutLine(23, 'No files to tag/untag; press SPACE to continue');
            WHILE UiGetChar <> ' ' DO BEGIN END;
            Exit(OpTagToggle);
        END;

        dline := 'Type A-@';
        dline[Length(dline)] := Chr(64 + state.d_size);
        StrApnd(80, Ord4(@dline), ' to tag/untag, or SPACE to exit');
        UiPutLine(23, dline);

        WHILE true DO BEGIN
            ch := UiGetChar;
            IF ch = ' ' THEN Exit(OpTagToggle);

            index := Ord(ch) - 64;
            IF index > 20 THEN index := index - 32;  { lower to upper case }
            IF (index >= 1) AND (index <= state.d_size) THEN BEGIN
                index := index + 20 * state.d_page;

                IF index IN state.tagged THEN BEGIN
                     state.tagged := state.tagged - [index];
                     state.n_tags := state.n_tags - 1;
                END ELSE BEGIN
                     state.tagged := state.tagged + [index];
                     state.n_tags := state.n_tags + 1;
                END;

                OpShowDirPage(state);
            END;
        END;
    END;

    { Helper for OpSendAll: get name of next file to send }
    { Like NextTaggedFile (below), but behaves as if ALL files were tagged }
    { Prior to the first call, index should be set to 0, and the directory
      stream should be rewound to the beginning }
    { Returns false iff there are no more files to send or any error occurs }
    FUNCTION NextAnyFile(VAR state: ShellState;
                         VAR index: Integer;  { start with 0 }
                         VAR name:  E_Name): Boolean;
    VAR
        prefix:  E_Name;
        errno:   Integer;
    BEGIN
        prefix := '';

        name := '';
        XdGetNextEntry(errno, prefix, name);
        IF errno = 848 THEN BEGIN  { Out of directory entries }
            NextAnyFile := false;
        END ELSE BEGIN
            index := index + 1;
            CheckWarn(errno, 'reading directory stream');
            NextAnyFile := errno = 0;
        END;
    END;

    { Helper for OpSendTagged: get name of next tagged file to send }
    { Steps through the directory stream a file at a time while incrementing
      index; if index is in state.tagged, sets name to the corresponding
      file and returns true; returns false if the end of the filestream is
      reached }
    { Prior to the first call, index should be set to 0, and the directory
      stream should be rewound to the beginning }
    { Returns false iff there are no more files to send or any error occurs }
    FUNCTION NextTaggedFile(VAR state: ShellState;
                            VAR index: Integer;  { start with 0 }
                            VAR name:  E_Name): Boolean;
    VAR
        got_next:  Boolean;
    BEGIN
        REPEAT
            got_next := NextAnyFile(state, index, name);
            NextTaggedFile := got_next;
            IF index IN state.tagged THEN Exit(NextTaggedFile);
        UNTIL NOT got_next;
    END;

    { LibXfer ProgressCallback implementation for file transfers }
    PROCEDURE UiProgressCallback(phase:        YmTxPhase;
                                 bytes_sent:   Longint;
                                 bytes_total:  Longint;
                                 errors:       Integer);
    VAR
        bsent_str:   Str10;
        btotal_str:  Str10;
        phase_str:   YmPhaseStr;
        errors_str:  Str10;
        info:        Str50;
        progress:    Integer;
    BEGIN
        IF phase = kYmTxDone THEN BEGIN
            UiPutProgress(-1, '');  { Clear progress display }
            Exit(UiProgressCallback);
        END;

        UintToStr(bytes_sent, bsent_str);
        UintToStr(bytes_total, btotal_str);
        YmPhaseName(phase, phase_str);
        UintToStr(errors, errors_str);
        info := bsent_str;
        StrApnd(50, Ord4(@info), '/');
        StrApnd(50, Ord4(@info), btotal_str);
        StrApnd(50, Ord4(@info), ', errs: ');
        StrApnd(50, Ord4(@info), errors_str);
        StrApnd(50, Ord4(@info), '. ');
        StrApnd(50, Ord4(@info), phase_str);
        progress := 999 * bytes_sent div bytes_total;
        UiPutProgress(progress, info);
    END;

    { Generic implementation of OpSend*; behavior depends on NextFile }
    { Returns the number of files sent }
    FUNCTION SendFiles(VAR state: ShellState;
                       FUNCTION NextFile(VAR state: ShellState;
                                         VAR index: Integer;
                                         VAR name:  E_Name): Boolean): Integer;
    LABEL
        2222;
    VAR
        files_sent:    Integer;
        old_page:      Integer;
        index:         Integer;
        to_send:       E_Name;
        next_to_send:  E_Name;
        last_file:     Boolean;
        errphase:      YmTxPhase;
        errno:         Integer;
        errline:       DisplayLine;
    BEGIN
        files_sent := 0;  { No files sent so far }
        SendFiles  := files_sent;

        { Rewind directory stream so that we can scan the current directory
          with NextFile }
        old_page := state.d_page;  { So we can return to this page later }
        RewindDirStream(errno);
        index := 0;  { Prepare file index counter for NextFile }

        { We have just thrown the ShellState state out of synch with the
          directory stream, so we change its state so that our eventual
          OpPageGoto(state, old_page) call will work successfully }
        state.d_final := true;  { OpPageGoto will restart at top of directory }
        state.d_page := -1;     { Because stale state.d_page = old_page }

        { But if we hit an error back there, we probably shouldn't proceed }
        IF errno <> 0 THEN BEGIN
            UiPutLine(23, 'Filesystem errors; press SPACE to continue');
            WHILE UiGetChar <> ' ' DO BEGIN END;
            OpPageGoto(state, old_page);  { Return to old dir listing page }
            Exit(SendFiles);
        END;

        { This somewhat complicated approach is intended to be more robust to
          filesystem changes than just checking whether we've sent state.n_tags
          files }
        IF NOT NextFile(state, index, next_to_send) THEN BEGIN
            UiPutLine(23, 'All files to send missing! press SPACE to continue');
            WHILE UiGetChar <> ' ' DO BEGIN END;
            OpPageGoto(state, old_page);  { Return to old dir listing page }
            Exit(SendFiles);
        END;

        { Here we send the files }
        UiPutLine(23, 'Start your YModem batch receiver now...');
        REPEAT
            to_send := next_to_send;
            last_file := NOT NextFile(state, index, next_to_send);
            YmTxFile(to_send, UiGetFd, last_file, UiProgressCallback,
                     errphase, errno);
            IF errno <> 0 THEN BEGIN
                errline := 'while sending ';
                StrApnd(80, Ord4(@errline), to_send);
                UiPutError(errno, errline);
                GOTO 2222;
            END;
            files_sent := files_sent + 1;
            SendFiles  := files_sent;
        UNTIL last_file; 2222:

        { Clear progress display and return to old directory listing page }
        UiPutProgress(-1, '');
        OpPageGoto(state, old_page);
    END;

    { Send tagged files via YModem Batch }
    PROCEDURE OpSendTagged(VAR state: ShellState);
    VAR
        files_sent:  Integer;
        sent_str:    Str10;
        tagged_str:  Str10;
        errline:       DisplayLine;
    BEGIN
        UiPutStatus( 'Sending tagged files');
        UiPutLine(0, 'Sending tagged files');

        IF state.n_tags <= 0 THEN BEGIN
            UiPutLine(23, 'No tagged files to send; press SPACE to continue');
            WHILE UiGetChar <> ' ' DO BEGIN END;
            Exit(OpSendTagged);
        END;

        files_sent := SendFiles(state, NextTaggedFile);
        UintToStr(files_sent, sent_str);
        UintToStr(state.n_tags, tagged_str);

        { If we sent a different amount that we expected, all we can do is
          complain about it }
        IF files_sent <> state.n_tags THEN BEGIN
            errline := 'Expected to send ';
            StrApnd(80, Ord4(@errline), tagged_str);
            StrApnd(80, Ord4(@errline), ' files, but sent ');
            StrApnd(80, Ord4(@errline), sent_str);
            StrApnd(80, Ord4(@errline), ' instead');
            UiPutError(0, errline);
        END ELSE BEGIN
            UintToStr(files_sent, sent_str);
            errline := 'Sent ';  { Not really an error... }
            StrApnd(80, Ord4(@errline), sent_str);
            StrApnd(80, Ord4(@errline), ' of ');
            StrApnd(80, Ord4(@errline), tagged_str);
            StrApnd(80, Ord4(@errline), ' files; press SPACE to continue');
            UiPutLine(23, errline);
        END;
        WHILE UiGetChar <> ' ' DO BEGIN END;
    END;

    { Send ALL files in the current directory via YModem Batch }
    PROCEDURE OpSendAll(VAR state: ShellState);
    VAR
        files_sent:  Integer;
        sent_str:    Str10;
        errline:     DisplayLine;
    BEGIN
        UiPutStatus( 'Sending all files in current directory');
        UiPutLine(0, 'Sending all files in current directory');

        IF (state.d_page = 1) AND (state.d_size = 0) THEN BEGIN
            UiPutLine(23, 'No files here to send; press SPACE to continue');
            WHILE UiGetChar <> ' ' DO BEGIN END;
            Exit(OpSendAll);
        END;

        files_sent := SendFiles(state, NextAnyFile);

        UintToStr(files_sent, sent_str);
        errline := 'Sent ';  { Not really an error... }
        StrApnd(80, Ord4(@errline), sent_str);
        StrApnd(80, Ord4(@errline), ' files; press SPACE to continue');
        UiPutLine(23, errline);
        WHILE UiGetChar <> ' ' DO BEGIN END;
    END;

    { Misc functions }
    PROCEDURE OpMisc(VAR state: ShellState);
    BEGIN
        UiPutStatus( 'Misc. actions menu');
        UiPutLine(0, 'Miscellaneous actions');
        UiPutLine(23, 'No misc. actions for now; press SPACE to continue');
        WHILE UiGetChar <> ' ' DO BEGIN END;
    END;

    { User help display }
    PROCEDURE OpHelp(VAR state: ShellState);
    BEGIN
        UiPutStatus( 'Help display');
        UiClearScreen;
        UiPutLine(0, 'Help information');
        UiPutLine(2, '  TODO(stepleton): Write help information');
        UiPutLine(23, 'Press SPACE to continue');
        WHILE UiGetChar <> ' ' DO BEGIN END;
    END;

    PROCEDURE RunXferShell;
    VAR
        state:     ShellState;
        action:    (kActStay,   { Show current page of the directory listing }
                    kActNext);  { Advance to next page of the listing }
        ch:        Char;
        cwd:       Pathname;  { Note: scratch space only; do not use as state }
        dline:     DisplayLine;
        uint_str:  Str10;
        errno:     Integer;

        { Program quit; internal so it can quit XferShell }
        PROCEDURE OpQuit(VAR state: ShellState);
        BEGIN
            UiPutStatus( 'Quitting?');
            UiClearScreen;
            UiPutLine(4, '     Really quit? [Y/N] ');
            WHILE true DO BEGIN
                CASE UiGetChar OF
                    'Y','y':    Exit(RunXferShell);
                    'N','n':    Exit(OpQuit);
                END;
            END;
        END;

    BEGIN
        state.d_final := true;  { Will restart us at top of directory }
        state.tagged := [];     { No entries are tagged }
        state.n_tags := 0;
        action := kActNext;     { We will need to show a new page of files }

        { Initialize sorted directory stream wrapper }
        UiPutStatus('Scanning current directory...');
        XdInit(errno);
        IF errno <> 0 THEN BEGIN
            UiPutError(errno, 'performing startup directory scan');
            Halt;
        END;

        { Wait for a key from the user before we begin }
        UiPutStatus('Ready! Awaiting any keypress to start UI loop...');
        ch := UiGetChar;

        { UI loop }
        WHILE true DO BEGIN
            UiPutStatus('In UI loop.');

            { Show main menu }
            UiClearScreen;
            UiPutLine(0,
'{V1.0} BBS: Next, Prev, Online, Chdir, Tag, Send tagged, send All, Misc, ?');

            { Advance to the next page of the directory listing, if desired }
            IF action = kActNext THEN BEGIN
                OpPageNext(state);  { To the next page }
                { If the next page is an empty "last page", then loop around
                  again to the very first page; note that OpPageNext will have
                  done its own looping after a non-empty last page }
                IF state.d_final AND
                   (state.d_page > 0) AND
                   (state.d_size = 0) THEN OpPageNext(state);
                { Remain on this page unless otherwise noted }
                action := kActStay;
            END;

            { Display the page of directory entries }
            OpShowDirPage(state);

            { Display summary line at bottom }
            Get_Working_Dir(errno, cwd);
            CheckWarn(errno, 'getting current working dir');
            dline := 'Page ';
            UintToStr(state.d_page + 1, uint_str);
            StrApnd(80, Ord4(@dline), uint_str);
            StrApnd(80, Ord4(@dline), ' of ');
            StrApnd(80, Ord4(@dline), cwd);
            StrApnd(80, Ord4(@dline), ', ');
            UintToStr(state.n_tags, uint_str);
            StrApnd(80, Ord4(@dline), uint_str);
            StrApnd(80, Ord4(@dline), ' tagged');
            UiPutLine(23, dline);

            { User action selection }
            { Unrecognized char just redraws the page }
            CASE UiGetChar OF
                'N','n',' ':    action := kActNext;  { Next page }
                'P','p':        OpPagePrev(state);
                'O','o':        OpOnline(state);
                'C','c':        BEGIN OpChdir(state); action := kActNext; END;
                'T','t':        OpTagToggle(state);
                'S','s':        OpSendTagged(state);
                'A','a':        OpSendAll(state);
                'M','m':        OpMisc(state);
                'Q','q':        OpQuit(state);
                '?':            OpHelp(state);
            END;
        END;
    END;

END.
