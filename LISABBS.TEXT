(* To compile on Workshop 1.0: at command line, type R<XFER/LisaBBS()i
$EXEC
A{ssemble}Xfer/LibAsm.Asm{---------------}
{ No listing }
Xfer/LibAsm.Asm
P{ascal}Xfer/LibAsm{---------------------}
{ No listing }
Xfer/LibAsm
G{enerate}Xfer/LibAsm
Xfer/LibAsm
P{ascal}Xfer/LibPort{--------------------}
{ No listing }
Xfer/LibPort
G{enerate}Xfer/LibPort
Xfer/LibPort
P{ascal}Xfer/LibData{--------------------}
{ No listing }
Xfer/LibData
G{enerate}Xfer/LibData
Xfer/LibData
P{ascal}Xfer/LibXfer{--------------------}
{ No listing }
Xfer/LibXfer
G{enerate}Xfer/LibXfer
Xfer/LibXfer
P{ascal}Xfer/LibSort{--------------------}
{ No listing }
Xfer/LibSort
G{enerate}Xfer/LibSort
Xfer/LibSort
P{ascal}Xfer/LibDir{---------------------}
{ No listing }
Xfer/LibDir
G{enerate}Xfer/LibDir
Xfer/LibDir
P{ascal}Xfer/LibUi{----------------------}
{ No listing }
Xfer/LibUi
G{enerate}Xfer/LibUi
Xfer/LibUi
P{ascal}Xfer/LibShell{-------------------}
{ No listing }
Xfer/LibShell
G{enerate}Xfer/LibShell
Xfer/LibShell
P{ascal}Xfer/LisaBBS{--------------------}
{ No listing }
Xfer/LisaBBS
G{enerate}Xfer/LisaBBS
Xfer/LisaBBS
L{ink}IOSPASLIB{-------------------------}
Xfer/LibAsm.Asm
Xfer/LibAsm
Xfer/LibPort
Xfer/LibData
Xfer/LibXfer
Xfer/LibSort
Xfer/LibDir
Xfer/LibUi
Xfer/LibShell
Xfer/LisaBBS
{ No more input files }
{ No listing }
Xfer/LisaBBS_exe
$ENDEXEC
*)

{ "LisaBBS": a utilty for downloading Lisa files using YModem }
PROGRAM LisaBBS;

USES
    {$U SysCall.Obj}         SysCall,
    {$U PasLibCall.Obj}      PasLibCall,
    {$U Xfer/LibAsm.Obj}     XferAsm,
    {$U Xfer/LibPort.Obj}    XferPort,
    {$U Xfer/LibUi.Obj}      XferUi,
    {$U Xfer/LibShell.Obj}   XferShell;

VAR
    p:         Port;
    p_fields:  PcFieldSet;
    p_conf:    PortConfig;
    fd:        Integer;
    errno:     Integer;
BEGIN
    { Initialize and open serial port }
    p := kPortA;                 { Serial port A }
    PcAllFields(p_fields);
    PcSensibleDefaults(p_fields, p_conf);
    p_conf.speed    := kPs9600;  { 9600 BPS }
    p_conf.block_in := false;    { Non-blocking reads }

    SetPortConfig(p, p_fields, p_conf, errno);
    IF errno <> 0 THEN BEGIN
        WriteLn('Error ', errno, ' while configuring serial port');
        Halt;
    END;

    fd := OpenPort(p, errno);
    IF errno <> 0 THEN BEGIN
        WriteLn('Error ', errno, ' while opening serial port');
        Halt;
    END;

    { Initialize the UI library }
    UiInit(p, fd);

    { Start the shell }
    RunXferShell;

    { Cleanup }
    WriteLn('That''s All, Folks!');
END.
