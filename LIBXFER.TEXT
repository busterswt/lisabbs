{ Routines for outbound transfer of Lisa files and file metadata using YModem }
{ For each file sent, a specially-made TAR archive is built on-the-fly }
UNIT XferXfer;

INTERFACE

USES
    {$U SysCall.Obj}        SysCall,
    {$U Xfer/LibAsm.Obj}    XferAsm,
    {$U Xfer/LibData.Obj}   XferData,
    {$U Xfer/LibPort.Obj}   XferPort;

TYPE
    { Phases of outbound YModem file transfer; used mainly for error reporting }
    { "Transferring" refers to a complete round trip: data heads outbound and
      an ACK returns from the recipient }
    YmTxPhase = (kYmTxOpenFile,  { Opening the file to send }
                 kYmTxStart   ,  { Awaiting 'C' from peer to start first file }
                 kYmTxHeader  ,  { Transferring the file header packet }
                 kYmTxFileData,  { Transferring any file data }
                 kYmTxEot     ,  { Transferring the end of file marker }
                 kYmTxRestart ,  { Awaiting 'C' from peer to start next file }
                 kYmTxFooter  ,  { Transferring "no file" file header packet }
                 kYmTxDone);     { File sent successfully }

    { For short string representations of YModem file transfer phases }
    YmPhaseStr = String[20];

{ PROCEDURES AND FUNCTIONS }

    { Retrieve a printable string corresponding to a YmTxPhase }
    PROCEDURE YmPhaseName(phase: YmTxPhase; VAR phase_str: YmPhaseStr);

    { Transmit a file across a bidirectional connection via YModem }
    { Uses YModem to transfer a single file from this machine to a peer using
      the YModem protocol. What's actually sent is a TAR archive with three
      files inside:
        - a Unix text file containing filesystem metadata
        - a file containing the contents of the file's label
        - a file containing the contents of the file itself.
      Even though a single file is transmitted, the YModem batch transfer
      protocol is used to provide the peer with filename and size information,
      facilitating progress display. }
    { Notes: port_fd should be configured for nonblocking I/O
             Consider flushing lookahead buffer before calling }
    { Args - name: name of file to send
          port_fd: bidirectional channel file reference number
            final: this is the last (or only) file (otherwise chain calls)
         callback: callback for local progress display
         errphase: transfer phase where fatal error was encountered, if any
            errno: OS error number of the fatal error, if any; 0 otherwise }
    { -1 errno indicates an internal error
      -2 errno indicates timeout
      -3 errno indicates remote-initiated cancel
      -4 errno indicates an anomalous read that didn't bother the OS }
    PROCEDURE YmTxFile(name: PathName; port_fd: Integer; final: Boolean;
                       { Callback for local display of transfer progress }
                       { Args - phase: current transfer phase
                           bytes_sent: TAR file bytes sent so far
                          bytes_total: total TAR file bytes to send
                               errors: count of recoverable errors encountered }
                       PROCEDURE ProgressCallback(phase:       YmTxPhase;
                                                  bytes_sent:  Longint;
                                                  bytes_total: Longint;
                                                  errors:      Integer);
                       VAR errphase: YmTxPhase; VAR errno: Integer);

    { A do-nothing ProgressCallback if no callback is desired }
    PROCEDURE NullProgressCallback(phase:       YmTxPhase;
                                   bytes_sent:  Longint;
                                   bytes_total: Longint;
                                   errors:      Integer);

IMPLEMENTATION

    PROCEDURE YmPhaseName{phase: YmTxPhase; VAR phase_str: YmPhaseStr};
    BEGIN
        CASE phase OF
            kYmTxOpenFile:  phase_str := 'open file';
            kYmTxStart:     phase_str := 'wait on receiver (1)';
            kYmTxHeader:    phase_str := 'send file header';
            kYmTxFileData:  phase_str := 'send file data';
            kYmTxEot:       phase_str := 'send end marker';
            kYmTxRestart:   phase_str := 'wait on receiver (2)';
            kYmTxFooter:    phase_str := 'send "done" header';
            kYmTxDone:      phase_str := 'transfer successful';
            OTHERWISE       phase_str := '?unknown xfer phase?';
        END;
    END;

    { Helper for YmTxFile: wait for receiver to initiate transfer }
    { For now, only CRC mode is supported }
    FUNCTION YmTxStart(port_fd:    Integer;
                       VAR oopses: Integer;
                       VAR errno:  Integer): Boolean;
    VAR
        unused:      Byte;
        bytes_read:  Longint;
    BEGIN
        bytes_read := 0;
        IF PolledAwait(port_fd, [kCee], unused, bytes_read,
                       60000, 1000, errno) THEN BEGIN
            oopses := oopses + bytes_read - 1;  { A valid byte isn't an "oops" }
            YmTxStart := true;
        END ELSE BEGIN
            IF errno = 0 THEN errno := -2;  { Timeout; else errno already set }
            YmTxStart := false;
        END;
    END;

    { Helper for YmTxFile: send a packet and await ACK }
    { -3 errno indicates remote-initiated cancel }
    FUNCTION YmRoundTrip(port_fd:    Integer;
                         data:       YModemBuffer;
                         VAR oopses: Integer;
                         VAR errno:  Integer): Boolean;
    VAR
        is_serial:  Boolean;
        p:          Port;
        size:       Integer;
        i:          Integer;
        actual:     Longint;
        response:   Byte;
        num_cans:   Integer;
    BEGIN
        YmRoundTrip := false;  { Assume failure by default }
        num_cans := 0;  { No CANcel commands received so far }

        is_serial := RefnumToPort(port_fd, p, errno);
        IF errno <> 0 THEN Exit(YmRoundTrip);

        { Figure out the size of the packet we're sending }
        { For code reuse that's slightly overkill but probably not all that
          bad, we also use this function to send the one-byte EOT end-of-file
          marker }
        CASE data[0] OF
            kEot:    size := 1;
            kSoh:    size := 133;   { 3 header bytes,  128 data, 2 CRC }
            kStx:    size := 1029;  { 3 header bytes, 1024 data, 2 CRC }
        OTHERWISE BEGIN
                errno := -1;  { Misconfiguration }
                Exit(YmRoundTrip);
            END;
        END;

        { Try ten times for a packet round trip }
        FOR i := 1 to 10 DO BEGIN
            { Attempt to send the packet; 30s is enough time for 300 bps }
            IF is_serial THEN BEGIN
                TimedWrite(p, port_fd, Ord4(@data), size, actual, 30, errno);
            END ELSE BEGIN
                PolledWrite(port_fd, Ord4(@data), size, actual, 30, 100, errno);
            END;

            { Critical send error; fail }
            { Note: it's TimedWrite/PolledWrite's job to ensure full writes }
            IF (errno <> 0) OR (actual <> size) THEN BEGIN
                oopses := oopses + 1;
                Exit(YmRoundTrip);
            END;

            { Attempt to receive a response character we recognize }
            IF PolledAwait(port_fd, [kAck, kCan], response, actual,
                           10000, 100, errno) THEN BEGIN
                { If an ACK, then the packet was sent successfully }
                IF response = kAck THEN BEGIN
                    YmRoundTrip := true;
                    Exit(YmRoundTrip);
                END;
                { Otherwise, it was a CAN; two CANs mean quit }
                num_cans := num_cans + 1;
                IF num_cans >= 2 THEN BEGIN
                    oopses := oopses + 1;
                    errno := -3;
                    Exit(YmRoundTrip);
                END;
            END;
        END;

        { Return in failure }
    END;

    { Helper for YmTxFile: read (up to) 512 bytes of a file into a buffer }
    { Notes; will not attempt to read beyond the file's LEOF }
    { Args - file_fd: reference number of the file to read
                addr: address of buffer receiving data
                stat: Fs_Info record for file referred to by fd
               total: File bytes read so far; will be incremented
               errno: OS error number of any fatal error, if any; 0 otherwise }
    { -4 errno indicates an anomalous read that didn't bother the OS }
    PROCEDURE NextChunk(file_fd:    Integer;
                        addr:       Longint;
                        VAR stat:   Fs_Info;
                        VAR total:  Longint;
                        VAR errno:  Integer);
    VAR
        target: Longint;
        actual: Longint;
    BEGIN
        { Assume success by default }
        errno := 0;

        { Compute how much to read for this chunk }
        target := stat.size - total;
        IF target <=   0 THEN Exit(NextChunk);  { If nothing, exit }
        IF target >  512 THEN target := 512;    { Cap at 512 bytes }

        { Read data; set errno on anomalously-sized read }
        Read_Data(errno, file_fd, addr, target, actual, Sequential, 0);
        IF (target <> actual) AND (errno = 0) THEN errno := -4;

        { Update total }
        total := total + actual;
    END;

    PROCEDURE YmTxFile{name: PathName; port_fd: Integer; final: Boolean;
                       PROCEDURE ProgressCallback(phase:       YmTxPhase;
                                                  bytes_sent:  Longint;
                                                  bytes_total: Longint;
                                                  errors:      Integer);
                       VAR errphase: YmTxPhase; VAR errno: Integer};
    VAR
        oopses:      Integer;
        progrezz:    Longint;  { 8 char symbol length limit }
        file_fd:     Integer;
        stat:        Fs_Info;
        size:        Longint;  { TAR file size }
        buffer:      YModemBuffer;
        seq:         Integer;
        unused:      Longint;
        bytes_read:  Longint;

        { Helper: compute size of the tar file we send over the wire }
        FUNCTION TarFileSize(stat: Fs_Info): Longint;
        VAR
            size: Longint;
        BEGIN
            { Filesize (in bytes):
                512 (tar header) + 512 (filesystem metadata) +
                512 (tar header) + 512 (file label data) +
                512 (tar header) + N +
                1024 (tar "footer" of all zeroes)
              where N is the size of the file itself, rounded up to the nearest
              larger multiple of 512 }
            size := 3584 + 512 * (stat.size div 512);
            IF stat.size mod 512 > 0 THEN size := size + 512;
            TarFileSize := size;
        END;

        { Helper: close the file (if open) before exiting }
        PROCEDURE Bail(fd: Integer);
        VAR
            unused: Integer;
        BEGIN
            IF fd <> -1 THEN Close_Object(unused, fd);
            Exit(YmTxFile);
        END;

    BEGIN
        oopses := 0;
        progrezz := 0;
        file_fd := -1;  { Hopefully -1 is never a valid refnum }


        errphase := kYmTxOpenFile;  { PHASE 1: File opening }
        ProgressCallback(errphase, progrezz, size, oopses);
        { Open the file to send, and stat it }
        Open(errno, name, file_fd, [Dread]);
        IF errno <> 0 THEN Bail(file_fd);
        Info(errno, file_fd, stat);
        IF errno <> 0 THEN Bail(file_fd);
        size := TarFileSize(stat);


        errphase := kYmTxStart;     { PHASE 2: Await transfer initiation }
        ProgressCallback(errphase, progrezz, size, oopses);
        IF NOT YmTxStart(port_fd, oopses, errno) THEN Bail(file_fd);


        errphase := kYmTxHeader;    { PHASE 3: Send header, await ACK + init }
        ProgressCallback(errphase, progrezz, size, oopses);
        seq := YmFileHdrPacket(buffer, stat.name, size, stat.DTM);
        IF NOT YmRoundTrip(port_fd, buffer, oopses, errno) THEN Bail(file_fd);
        IF NOT YmTxStart(port_fd, oopses, errno) THEN Bail(file_fd);


        errphase := kYmTxFileData;  { PHASE 4: Send file data, await ACKs }
        ProgressCallback(errphase, progrezz, size, oopses);

        seq := InfoPacket(buffer, stat, seq);   { Filesystem metadata }
        IF NOT YmRoundTrip(port_fd, buffer, oopses, errno) THEN Bail(file_fd);
        progrezz := progrezz + 1024;
        ProgressCallback(errphase, progrezz, size, oopses);

        seq := LabelPacket(buffer, stat, seq);  { File label data }
        IF NOT YmRoundTrip(port_fd, buffer, oopses, errno) THEN Bail(file_fd);
        progrezz := progrezz + 1024;
        ProgressCallback(errphase, progrezz, size, oopses);

        bytes_read := 0                         { Beginning of file }
        DataHdrPacket(buffer, stat);
        unused := MemSet(buffer, 0, 3 + 512, 512);
        NextChunk(file_fd, YmDataAddr(buffer) + 512, stat, bytes_read, errno);
        IF errno <> 0 THEN Bail(file_fd);
        seq := YmFinishPacket(buffer, seq, true {big!});
        IF NOT YmRoundTrip(port_fd, buffer, oopses, errno) THEN Bail(file_fd);
        { ProgressCallback gets TAR file bytes sent so far, not raw bytes sent
          out over the wire, so special handling for a 0-byte file }
        IF bytes_read = 0 THEN progrezz := progrezz + 512
                          ELSE progrezz := progrezz + 1024;
        ProgressCallback(errphase, progrezz, size, oopses);

        WHILE bytes_read < stat.size DO BEGIN   { Remainder of file }
            { Zero out packet payload }
            unused := MemSet(buffer, 0, 3, 1024);

            { Read first 512-byte chunk into the packet }
            NextChunk(file_fd, YmDataAddr(buffer), stat, bytes_read, errno);
            IF errno <> 0 THEN Bail(file_fd);
            progrezz := progrezz + 512;

            { If we didn't hit EOF, read the next 512-byte chunk }
            IF bytes_read < stat.size THEN BEGIN
                NextChunk(
                    file_fd, YmDataAddr(buffer) + 512, stat, bytes_read, errno);
                IF errno <> 0 THEN Bail(file_fd);
                progrezz := progrezz + 512;
            END;

            { Send this packet }
            seq := YmFinishPacket(buffer, seq, true {big!});
            IF NOT YmRoundTrip(port_fd, buffer, oopses, errno) THEN BEGIN
                Bail(file_fd);
            END;
            ProgressCallback(errphase, progrezz, size, oopses);
        END;

        { Close file }
        Close_Object(errno, file_fd);
        file_fd := -1;

        { Send a zeroes packet, which is either the complete TAR file footer
          or its last 512 bytes; note correct handling of progress tally }
        unused := MemSet(buffer, 0, 3, 1024);
        seq = YmFinishPacket(buffer, seq, true {big!});
        IF NOT YmRoundTrip(port_fd, buffer, oopses, errno) THEN Bail(file_fd);
        progrezz := progrezz + 512;
        IF progrezz MOD 1024 > 0 THEN progrezz := progrezz + 512;
        ProgressCallback(errphase, progrezz, size, oopses);


        errphase := kYmTxEot;       { PHASE 5: Send EOT, await ACK }
        ProgressCallback(errphase, progrezz, size, oopses);
        buffer[0] := kEot;
        IF NOT YmRoundTrip(port_fd, buffer, oopses, errno) THEN Bail(file_fd);


        IF final THEN BEGIN
            errphase := kYmTxRestart;   { PHASE 6: Await re-initiation }
            ProgressCallback(errphase, progrezz, size, oopses);
            IF NOT YmTxStart(port_fd, oopses, errno) THEN Bail(file_fd);


            errphase := kYmTxFooter;    { PHASE 7: Send empty header }
            ProgressCallback(errphase, progrezz, size, oopses);
            seq := YmEmptyFileHdrPacket(buffer);
            IF NOT YmRoundTrip(port_fd, buffer, oopses, errno) THEN BEGIN
                Bail(file_fd);
            END;
        END;


        errphase := kYmTxDone;      { PHASE 0: All done }
        ProgressCallback(errphase, progrezz, size, oopses);
        { No error, all went well }
        errno := 0;
    END;

    PROCEDURE NullProgressCallback{phase:       YmTxPhase;
                                   bytes_sent:  Longint;
                                   bytes_total: Longint;
                                   errors:      Integer};
    BEGIN
        { Do nothing }
    END;

END.
